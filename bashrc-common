ms()
{
    minikube service --namespace=$2 --format="$1://{{.IP}}:{{.Port}}" $3
}

show-cert ()
{
    local OPENSSL=openssl
    if [ -z "$1" ]; then
        echo "Hostname required" 1>&2;
    else
        echo | $OPENSSL s_client -showcerts -servername $1 -connect $1:443 2> /dev/null | $OPENSSL x509 -inform pem -noout -text;
    fi
}

clean-git()
{
    echo "The following branches will be deleted"
    git branch --merged | grep -v "\*" | xargs -n 1 echo
    read -p "Continue? " CONTINUE
    if [[ $CONTINUE == y* ]]; then
        git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
    fi
}

dpull()
{
    PROJECT=${1:-.}
    grep -Irn "image: .*us.gcr.io" ${PROJECT}/deployment/*.yaml | sed 's/.*image: \(.*\)/\1/' | sort | uniq | xargs -n 1 gcloud docker -- pull
}

mkv()
{
    mkvirtualenv $(basename $PWD) $@
}

wo()
{
    workon $(basename $PWD)
}

mkp()
{
    mkdir -p $1
    touch $1/__init__.py
}

auth-gke()
{
    gcloud auth login --force --update-adc
}

alias docker-env='eval $(minikube docker-env)'

alias sync-minikube='minikube ssh -- sudo date $(date -u +"%m%d%H%M2020.%S")'

alias "sba=source bin/activate"

alias 'podme=podman run --mount=type=bind,src=/home/thomasstephens,dst=/home/thomasstephens -it -w $PWD --privileged'

alias 'gcauth-podman=gcloud auth print-access-token | podman login -u oauth2accesstoken --password-stdin https://us.gcr.io'

alias 'android-emulator=emulator -avd android-29-4 -feature -GLDirectMem,-GLDMA,-GLDMA2'

if command -v pyenv 1>/dev/null 2>&1
then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    pyenv virtualenvwrapper
fi

export EDITOR=emacs

function dynamic_title_prompt
{
    case $TERM in
        alacritty*)
            local TITLEBAR='\[\033]0;\u@\h \W\007\]'
            ;;
        *)
            local TITLEBAR=''
            ;;
    esac

    PS1="${TITLEBAR}[\u@\h \W]\$ "
}

dynamic_title_prompt
